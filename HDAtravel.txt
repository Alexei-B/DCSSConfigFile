# This still has plenty of bugs, submit them at: 
# https://github.com/HilariousDeathArtist/DCSSConfigFile
# or find me on crawl.s-z.org

include += HDAtravel.macro
confirm_butcher = never
easy_eat_chunks = true
auto_eat_chunks = true
auto_drop_chunks = yes
easy_eat_contaminated = true
message_colour = mute:you're not good enough to have a special ability
message_colour = mute:\&\&\!\!

autoinscribe += bread ration:@e1
autoinscribe += meat ration:@e2
autoinscribe += chunk:@w0
autoinscribe += staff of energy:!d!a, @w1

##################
#    HDAtravel   #
##################
-- To use this create a macro with the following function call
-- ===HDAtravel
-- Rests up to at least 75% hp (or missing at least 30hp) and 50% mp (or missing at least 20mp)
-- Eats chunks automatically, handled by auto_eat_chunks interface option
-- Travels to the nearest corpse if we have no chunks and are at Very Hungry or Hungry or using Gourmand and at Full
-- Automatically chops valid corpses if we are standing on them and we have no chunks
-- Will stop autotravel at Near Starving
-- Channels MP if you have staff of enery or worship Sif when you have extra chunks
-- Casts regen out of combat if you have spare chunks and are missing hp
-- TODO: better detection of non-edible corpses before standing on them
-- NOTE: If you don't have rP you will still chop poisonous corpses, but not pick up their chunks

: function HDAtravel()
:   local mp, max_mp = you.mp()
:   local hp, max_hp = you.hp()
:   local first_monster = next(getMonsterList())
:   local already_checked = (no_results() or dont_know_how_to_get_there())
:   local is_safe = (first_monster == nil)
:   local missing_mp = (mp < max_mp)
:   local missing_hp = (hp < max_hp)
:   local need_to_recover = should_rest(hp, mp, max_hp, max_mp)
:   local have_no_chunks = have_no_chunks()
:   local you_are_sif = string.find(you.god(), "Sif")
:   local sacrifice_god = you_worship_sacrifice_god()
:   local you_are_mummy = string.find(you.race(), "Mummy")
:   local you_do_not_eat = string.find(you.race(), "Spriggan") or you_are_mummy
:   local lichform = string.find(you.transform(), "lich")
:   local you_are_regen = you.regenerating()
:   local you_know_simulacrum = known_spells["Simulacrum"]
:   local you_know_sublimation = known_spells["Sublimation of Blood"]
:   local you_know_animate_skeleton = known_spells["Animate Skeleton"]
:   local chunks_are_equipped = is_weapon("chunk")
:   local distort_weapon = is_weapon("distort")
:   local vamp_weapon = is_weapon("vamp")
:   local have_a_weapon = is_in_inventory("weapon")
:   local gourmand_and_hungry = you_are_gourmand() and not (you_are_very_full() or you_are_engorged())
:   local want_to_eat = (you_are_hungry() or gourmand_and_hungry) and not you_do_not_eat
:   local have_spare_chunks = not have_no_chunks and not you_are_hungry()
:   local you_have_staff_of_energy = is_in_inventory("staff of energy")
:   local staff_of_energy_is_equipped = is_weapon("staff of energy")
:   local staff_of_energy_letter = find_item_letter("staff of energy")
:   local chunks_letter = find_item_letter("chunk")
:   local you_are_hungerless = you_are_mummy or lichform
:   local no_food_issues = (you_are_hungerless or have_spare_chunks)
:   local should_channel_mp = ((max_mp - mp) > 5) and no_food_issues
:   local you_know_regen = known_spells["Regeneration"]
:   local you_have_regen_ring = is_in_inventory("regeneration")
:   local regen_ring_letter = find_item_letter("regeneration")
:   local regen_ring_is_equipped = is_ring("regeneration")
:   local should_regen_hp = ((max_hp - hp) > 10) and (mp>3) and no_food_issues and (not you_are_regen)
:   local you_want_spare_chunks = (not have_spare_chunks) and (you_know_regen or you_know_sublimation or you_know_simulacrum or you_have_staff_of_energy or (you_are_sif and not you_are_mummy))
:   local you_want_chunks = have_no_chunks and (want_to_eat or you_want_spare_chunks)
:   --crawl.mpr(string.format("you_are_hungry is: %s", you_are_hungry() and "True" or "False"))
:   --crawl.mpr(string.format("gourmand_and_hungry is: %s", gourmand_and_hungry and "True" or "False"))
:   --crawl.mpr(string.format("you_do_not_eat is: %s", you_do_not_eat and "True" or "False"))
:   --crawl.mpr(string.format("have_spare_chunks is: %s", have_spare_chunks and "True" or "False"))
:   --crawl.mpr(string.format("you_want_chunks is: %s", you_want_chunks and "True" or "False"))
:   --crawl.mpr(string.format("have_no_chunks is: %s", you_want_chunks and "True" or "False"))
:   --crawl.mpr(string.format("want_to_eat is: %s", want_to_eat and "True" or "False"))
:   --crawl.mpr(string.format("you_want_spare_chunks is: %s", you_want_spare_chunks and "True" or "False"))
:   if (is_safe) then 
:     if should_channel_mp and you_know_sublimation and have_spare_chunks and mp>2 and (not (distort_weapon or vamp_weapon)) and you_are_not_felid() then
:       if not chunks_are_equipped then
:         crawl.mpr("<cyan>Wielding chunks to sublimate.</cyan>")
:         sendkeys('w0')
:       end
:       crawl.mpr("<lightcyan>Autocasting Sublimation of Blood.</lightcyan>")
:       sendkeys('zm')
:     elseif should_channel_mp and you_are_sif then
:       crawl.mpr("<lightcyan>Autochanneling using Sif.</lightcyan>")
:       sendkeys('aa')
:     elseif should_regen_hp and (you_know_regen or you_have_regen_ring) then
:       if (you_know_regen) then
:         crawl.mpr("<green>Autocasting Regen.</green>")
:         --This assumes casting regen is bound to zr
:         sendkeys('zr')
:       elseif you_have_regen_ring and not regen_ring_is_equipped then
:         crawl.mpr("<yellow>You should equip your regen ring.</yellow>")
:         sendkeys('P' .. regen_ring_letter)
:       end  
:     elseif (should_channel_mp and you_have_staff_of_energy and no_food_issues) and (not (distort_weapon or vamp_weapon)) and you_are_not_felid() then
:       if not staff_of_energy_is_equipped then
:         crawl.mpr("<cyan>Switching to staff of energy.</cyan>")
:         sendkeys('w1')
:       end
:       crawl.mpr("<lightcyan>Autochanneling using staff of energy.</lightcyan>")
:       sendkeys('v')
:     elseif (no_weapon() and have_a_weapon) or (staff_of_energy_is_equipped and (not (staff_of_energy_letter == 'a')) or (chunks_are_equipped and (not (chunks_letter == 'a')))) then
:       crawl.mpr("<cyan>Switching to main weapon.</cyan>")
:       sendkeys('wa')
:     elseif want_to_eat and not have_no_chunks then
:       crawl.mpr("<cyan>Autoeating chunks.</cyan>")
:       sendkeys('e')
:     elseif you_want_chunks and on_corpses() and not on_chunks() then 
:       if you_know_animate_skeleton and mp>1 and (not can_not_animate()) then
:         crawl.mpr("<cyan>Autocasting Animate Skeleton for chunks.</cyan>")
:         sendkeys('zA')
:       else
:         crawl.mpr("<cyan>Autochopping corpse.</cyan>")
:         sendkeys('c')
:       end
:     elseif (not need_to_recover) and you_want_chunks and (not (on_chunks() or on_corpses() or already_checked)) then
:       crawl.mpr("<yellow>You may need something to eat soon, looking for food.</yellow>")
:       find_corpses()
:     elseif you_are_starving_or_near() and have_no_chunks and not (on_chunks() or on_corpses()) then
:       local have_bread = is_in_inventory("bread ration")
:       local have_meat = is_in_inventory("meat ration")
:       if have_bread or have_meat then
:         local result = crawl.yesnoquit("<cyan>Eat a ration?</cyan>")
:         if result == 1 and have_bread then
:           sendkeys('e1')
:         elseif result == 1 then
:           sendkeys('e2')
:         elseif result == 0 then
:           autoexplore()
:         end
:         if not (is_in_inventory("bread ration") or is_in_inventory("meat ration")) then
:           crawl.mpr("<lightred>That was your last ration! You should go get more.</lightred>")
:         end
:       else
:         crawl.mpr("<red>No rations left! You should look for food.</red>")
:       end
:     elseif need_to_recover and not you_are_starving() then
:       rest()
:     elseif ((not sacrifice_god) and on_corpses() and you_know_animate_skeleton and mp>1 and (not can_not_animate())) then
:       crawl.mpr("<cyan>Autocasting Animate Skeleton</cyan>")
:       sendkeys('zA')
:     else
:       --This does the general travelling
:       autoexplore()
:     end
:   else 
:     --This will provide the "foo is nearby" message 
:     autoexplore()
:   end
: end
  
<
  
  function sendkeys(command)
    crawl.flush_input()
    crawl.sendkeys(command)
    coroutine.yield(true)
    crawl.flush_input()
  end 

  function should_rest(hp, mp, max_hp, max_mp)
    return (mp < (max_mp*0.50) 
            or (hp < (max_hp*0.75)) 
            or ((max_hp-hp) > 30) 
            or ((max_mp-mp) > 20) 
            or (you.slowed()) 
            or (you.poisoned()) 
            or (you.confused())
            or (you.exhausted())
            or (((hp < max_hp) or (mp < max_mp)) and you_are_mummy))
  end

  -- Hungry, Very Hungry, Near Starving, Starving
  function you_are_hungry()
    return not you_are_not_hungry() and ((string.find(you.hunger_name(), "hungry")) or you_are_starving_or_near())
  end

  -- Normal Satiation
  function you_are_not_hungry()
    return (string.find(you.hunger_name(), "not hungry"))
  end

  -- Engorged
  function you_are_engorged()
    return (string.find(you.hunger_name(), "completely stuffed"))
  end
  
  -- Very full
  function you_are_very_full()
    return (string.find(you.hunger_name(), "very full"))
  end

  -- Near Starving
  function you_are_near_starving()
    return (string.find(you.hunger_name(), "near starving"))
  end
  
  -- Near Starving, Starving
  function you_are_starving_or_near()
    return (string.find(you.hunger_name(), "starving"))
  end
  
  -- Starving
  function you_are_starving()
    return you_are_starving_or_near() and not you_are_near_starving()
  end

  function autoexplore()
    sendkeys('o')
  end

  function no_results()
    return string.find(crawl.messages(10), escape("Can't find anything matching that")) 
        or string.find(crawl.messages(10), escape("You may need something to eat soon"))   
  end

  function dont_know_how_to_get_there()
    return string.find(crawl.messages(10), escape("know how to get there"))
        or string.find(crawl.messages(10), escape("Have to go through"))
  end
  
  function can_not_animate()
    return string.find(crawl.messages(10), escape("There is nothing here that can be animated")) 
  end
  
  function can_not_eat_that()
    return string.find(crawl.messages(10), escape("You can't eat that"))
        --These strings don't seem to show up in messages
        --or string.find(crawl.messages(10), escape("Not only inedible but also greatly harmful"))
        --or string.find(crawl.messages(10), escape("It is caustic"))
  end
  
  function rest()
    sendkeys('5')
  end

  function you_are_gourmand()
    return you.gourmand() or (not you_are_not_troll()) or (string.find(you.race(), "Kobold"))
  end

  function have_no_chunks()
    for it in inventory() do
      if string.find(it.name(), "chunk") and not string.find(it.name(), "rotting") then
        return false
      end
    end
    return true
  end
  
  function is_in_inventory(str)
    for it in inventory() do
      if string.find(it.name(), str) then
        return true
      end
    end
    return false
  end
  
  function find_item_letter(str)
    for i = 0,51 do
      it = items.inslot(i)
      if it then
        if string.find(it.name(), str) then
          return i
        end
      end
    end
    return false
  end
  
  function you_worship_sacrifice_god()
    return string.find(you.god(), "Trog") or string.find(you.god(), "Oka") 
        or string.find(you.god(), "Makhleb")  or string.find(you.god(), "Beogh") 
        or string.find(you.god(), "Lugonu") or string.find(you.god(), "Nemelex")
  end
  
  function on_corpses()
    local fl = you.floor_items()
    for it in iter.invent_iterator:new(fl) do
      if string.find(it.name(), "corpse")
          and not string.find(it.name(), "rotting")
          and not string.find(it.name(), "plague") then
        return true
      end
    end
    return false
  end

  function on_chunks()
    for it in floor_items() do
      if string.find(it.name(), "chunk") then
        return true
      else
        return false
      end
    end
  end

  function you_are_carnivore()
    return you.saprovorous()
  end
  
  function you_are_not_ghoul()
    return not (string.find(you.race(), "Ghoul"))
  end
  
  function you_are_not_troll()
    return not (string.find(you.race(), "Troll"))
  end
  
  function you_are_not_felid()
    return not (string.find(you.race(), "Felid"))
  end
  
  function you_are_not_octopode()
    return not (string.find(you.race(), "Octopode"))
  end

  function find_corpses()
    sendkeys(string.char(6) .. "@corpse&&!!rott&&!!skel&&!!sky&&!!vampire&&!!corpse rot" .. "\ra\r")
  end

  function inventory()
    return iter.invent_iterator:new(items.inventory())
  end

  function floor_items()
    return iter.invent_iterator:new(you.floor_items())
  end
  
  function no_weapon()
    return (items.equipped_at("Weapon") == nil) 
       and you_are_not_ghoul() and you_are_not_troll() and you_are_not_felid() and you_are_not_octopode()
       and (you.skill("Unarmed Combat") < 5)
  end
  
  function is_weapon(str)
    local weapon =  items.equipped_at("Weapon")
    if weapon then
      return string.find(weapon.name(), str)
    else
      return false
    end
  end
  
  function is_ring(str)
    local ring1 = items.equipped_at("Left Ring")
    local ring2 = items.equipped_at("Right Ring")
    if ring1 and ring2 then
      return string.find(ring1.name(), str) or string.find(ring2.name(), str)
    elseif ring1 then
      return string.find(ring1.name(), str)
    elseif ring2 then
      return string.find(ring2.name(), str)
    else
      return false
    end
  end
  
  function item_in_view(str)
    local x,y    
    for x = -8,8 do
      for y = -8,8 do
        if not (x == 0 and y == 0) then
          local pile = items.get_items_at(x,y)
          if pile ~= nil then
            for it in iter.invent_iterator:new(pile) do
              if string.find(it.name(), str) and you.see_cell_no_trans(x,y) then
                return true
              end
            end
          end
        end
      end
    end
    return false
  end
  
  -- Returns a table where the key is the monster description and value is the total number of that mob in your vision
  function getMonsterList()
    local monsters = {}
    for x = -8,8 do
      for y = -8,8 do
        m = monster.get_monster_at(x, y)
        local attitude_hostile = 0
        if m and (m:attitude() == attitude_hostile) and not (m:is_firewood()) then
          desc = m:desc()
          if (monsters[desc] == nil) then
            monsters[desc] = 1
          else
            monsters[desc] = monsters[desc] + 1
          end
        end
      end
    end
    return monsters   
  end

  --Escapes the special characters in a string for pattern matching
  function escape(str)
    --Escapes parens and dash "()-"
    local escaped = str:gsub('[%(%)%-]','%\%1')
    --Removes any coloration parts of the string
    return (escaped:gsub('<[^<]*>',''))
  end
  
  local function init_spells()
    local spell_list = {}
    
    for _, spell_name in ipairs(you.spells()) do
      spell_list[spell_name] = true
    end
    
    return spell_list
  end
  
  known_spells = init_spells()
>